"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageRunner = void 0;
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const vscode = __importStar(require("vscode"));
/**
 * Runs Python package.
 */
class PackageRunner {
    /**
     * @param terminal Terminal to run package in.
     * @param optionsBuilder Options builder to build options for the package.
     * @param packageInfo Package information.
     * @param installationTerminalProvider Function to get a terminal to install the package in if it is not installed.
     */
    constructor(terminal, optionsBuilder, packageInfo, installationTerminalProvider) {
        if (installationTerminalProvider === undefined) {
            installationTerminalProvider = () => {
                return Promise.resolve(terminal);
            };
        }
        this.terminal = terminal;
        this.optionsBuilder = optionsBuilder;
        this.packageInfo = packageInfo;
        this.installationTerminalProvider = installationTerminalProvider;
    }
    //https://github.com/microsoft/vscode-python/blob/3698950c97982f31bb9dbfc19c4cd8308acda284/src/client/common/process/proc.ts
    //Using child_process
    /**
     * Run package for the uris based on the configuration. If package is not installed, show a prompt to install.
     * @param uris File paths and folder paths to run package for.
     */
    run(uris) {
        return __awaiter(this, void 0, void 0, function* () {
            yield vscode.window.withProgress({
                location: vscode.ProgressLocation.Window,
                title: `Running ${this.packageInfo.packageDisplayName}`,
            }, (progress) => __awaiter(this, void 0, void 0, function* () {
                progress.report({ increment: 0 });
                try {
                    const command = yield this.optionsBuilder.build(uris);
                    yield this.terminal.send(command);
                }
                catch (e) {
                    if (e instanceof Error && e.message.includes('No module named')) {
                        yield vscode.window
                            .showWarningMessage(`${this.packageInfo.packageDisplayName} is not installed. Install?`, 'Yes', 'No')
                            .then((selection) => __awaiter(this, void 0, void 0, function* () {
                            if (selection === 'Yes') {
                                yield (yield this.installationTerminalProvider()).send([
                                    '-m',
                                    'pip',
                                    'install',
                                    '-U',
                                    this.packageInfo.packageName,
                                ]);
                            }
                        }));
                    }
                    else {
                        yield vscode.window.showErrorMessage(
                        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                        `Failed to run ${this.packageInfo.packageDisplayName}.\n${e}`);
                    }
                }
            }));
        });
    }
}
exports.PackageRunner = PackageRunner;
