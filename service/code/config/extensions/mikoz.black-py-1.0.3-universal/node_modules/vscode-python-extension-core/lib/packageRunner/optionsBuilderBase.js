"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionsBuilderBase = void 0;
const vscode = __importStar(require("vscode"));
const optionsBuilderHelper_1 = require("./optionsBuilderHelper");
/**
 * Base class to build options for a Python package. Inherit from this class to build options for a specific package.
 */
class OptionsBuilderBase {
    /**
     * @param packageInfo Information about the package.
     */
    constructor(packageInfo) {
        this._packageInfo = packageInfo;
        this._optionsBuilderHelper = new optionsBuilderHelper_1.OptionsBuilderHelper(vscode.workspace.getConfiguration(this._packageInfo.packageConfigurationSection));
    }
    /**
     * Information about the package.
     */
    get packageInfo() {
        return this._packageInfo;
    }
    /**
     * Helper to build options.
     */
    get optionsBuilderHelper() {
        return this._optionsBuilderHelper;
    }
    /**
     * Base implementation of build. Override this method to build options for a specific package.
     * @param uris File paths and folder paths to run package for.
     * @returns Options for the package.
     */
    build(uris) {
        return __awaiter(this, void 0, void 0, function* () {
            this._optionsBuilderHelper = new optionsBuilderHelper_1.OptionsBuilderHelper(vscode.workspace.getConfiguration(this._packageInfo.packageConfigurationSection, uris[0]));
            const options = ['-m', this._packageInfo.packageName];
            if (uris.length > 0) {
                options.push(...uris.map(uri => `${uri.fsPath.replace(/\\/g, '/')}`));
            }
            return Promise.resolve(options);
        });
    }
}
exports.OptionsBuilderBase = OptionsBuilderBase;
