"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionsBuilderHelper = void 0;
/**
 * Helper class to create command line arguments from vscode Workspace Configuration.
 */
class OptionsBuilderHelper {
    /**
     * @param config Workspace Configuration.
     * @param flagPrefix Prefix of the command line arguments. e.g. '--', sometimes '-'.
     */
    constructor(config, flagPrefix = '--') {
        this._config = config;
        this._flagPrefix = flagPrefix;
    }
    get config() {
        return this._config;
    }
    /**
     * Build command line arguments from a list of flags.
     * @param flags Array of flag names. Each flag name must not contain the flag prefix, e.g. '--'. e.g. 'verbose' is a valid flag name, '--verbose' is not.
     * @returns Array of command line arguments.
     */
    buildFlags(flags) {
        return flags
            .filter(flag => this.config.get(flag, false))
            .map(flag => this.buildParameterExpression(flag));
    }
    /**
     * Build command line arguments from a list of parameters.
     * @param parameters Array of parameter names. Each parameter name must not contain the flag prefix, e.g. '--'. e.g. 'verbose' is a valid parameter name, '--verbose' is not.
     * @returns Array of command line arguments.
     */
    buildParameters(parameters) {
        return parameters
            .map(parameter => {
            const value = this.config.get(parameter);
            return value
                ? [this.buildParameterExpression(parameter), value.toString()]
                : [];
        })
            .reduce((previous, current) => previous.concat(current), []);
    }
    /**
     * Build command line arguments from a list of list parameters.
     * @param listParameters Array of parameter names. Each parameter name must not contain the flag prefix, e.g. '--'. e.g. 'verbose' is a valid parameter name, '--verbose' is not.
     * @returns Array of command line arguments.
     */
    buildListParameters(listParameters) {
        return listParameters
            .map(listParameter => {
            const list = this.config.get(listParameter, []);
            if (list.length > 0) {
                return [this.buildParameterExpression(listParameter), list.join(',')];
            }
            return [];
        })
            .reduce((previous, current) => previous.concat(current), []);
    }
    /**
     * Convert a parameter name to a command line argument. (e.g. 'verbose' to '--verbose')
     * @param name Name of the parameter. Must not contain the flag prefix, e.g. '--'. e.g. 'verbose' is a valid parameter name, '--verbose' is not.
     * @returns Expression of the parameter, e.g. '--verbose'.
     */
    buildParameterExpression(name) {
        return this._flagPrefix + name;
    }
}
exports.OptionsBuilderHelper = OptionsBuilderHelper;
