"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PythonVSCodeTerminal = void 0;
const vscode = __importStar(require("vscode"));
const assert = require("assert");
const vscodeUtils_1 = require("../vscodeUtils");
/**
 * Provides a properly configured vscode terminal for executing Python commands.
 */
class PythonVSCodeTerminal {
    constructor() {
        this.execCommand = [];
    }
    /**
     * Get the interpreter path for python.
     * @returns The interpreter path.
     */
    getPythonInterpreterPath() {
        const interpreterPath = vscode.workspace
            .getConfiguration('python', (0, vscodeUtils_1.getCurrentWorkspaceFolder)())
            .get('defaultInterpreterPath');
        if (!interpreterPath) {
            throw new ReferenceError('No python interpreter configured.');
        }
        return interpreterPath;
    }
    /**
     * Get a properly configured terminal for executing Python commands.
     * @returns The configured terminal.
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            // For terminal api, See: https://github.com/Tyriar/vscode-terminal-api-example/blob/master/src/extension.ts
            // Open terminal if not already opened or not active
            // exitStatus === undefined if terminal is still alive.
            if (!this.terminal || this.terminal.exitStatus !== undefined) {
                // There should be a better way than creating new terminal every time
                // There is no way to get terminal output unless we are using vscode api, therefore we don't know if
                // the terminal is propertly configured (e.g. activating venv)
                yield vscode.commands.executeCommand('python.createTerminal');
                this.terminal = vscode.window.activeTerminal;
                if (!this.terminal) {
                    throw new Error('Could not create terminal. Did you install VSCode Python extension?');
                    // But it should be installed because we have set "extensionDependencies" in package.json.
                }
            }
        });
    }
    send(options, addNewLine) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.terminal) {
                yield this.init();
                this.execCommand = this.getPythonInterpreterPath().split(' ');
            }
            assert(this.terminal);
            const command = this.execCommand.concat(options);
            this.terminal.sendText(command.join(' '), addNewLine);
        });
    }
}
exports.PythonVSCodeTerminal = PythonVSCodeTerminal;
