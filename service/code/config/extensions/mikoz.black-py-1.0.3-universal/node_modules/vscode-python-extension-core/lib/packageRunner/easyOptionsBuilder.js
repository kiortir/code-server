"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EasyOptionsBuilder = void 0;
const optionsBuilderBase_1 = require("./optionsBuilderBase");
/**
 * Class to build options more easily than inheriting from OptionsBuilderBase.
 */
class EasyOptionsBuilder extends optionsBuilderBase_1.OptionsBuilderBase {
    /**
     * @param packageInfo Information about the package.
     * @param flags Flag options for the package.
     * @param parameters Parameter options for the package.
     * @param listParameters List parameter options for the package.
     * @param additionalOptions Additional options for the package.
     */
    constructor(packageInfo, flags, parameters, listParameters, additionalOptions) {
        super(packageInfo);
        this._flags = flags;
        this._parameters = parameters;
        this._listParameters = listParameters;
        this._additionalOptions = additionalOptions || [];
    }
    /**
     * Flag options for the package.
     */
    get flags() {
        return this._flags;
    }
    /**
     * Parameter options for the package.
     */
    get parameters() {
        return this._parameters;
    }
    /**
     * List parameter options for the package.
     */
    get listParameters() {
        return this._listParameters;
    }
    /**
     * Additional options for the package.
     */
    get additionalOptions() {
        return this._additionalOptions;
    }
    build(uris) {
        const _super = Object.create(null, {
            build: { get: () => super.build }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return (yield _super.build.call(this, uris)).concat(this.optionsBuilderHelper.buildFlags(this._flags), this.optionsBuilderHelper.buildParameters(this._parameters), this.optionsBuilderHelper.buildListParameters(this._listParameters), this._additionalOptions);
        });
    }
}
exports.EasyOptionsBuilder = EasyOptionsBuilder;
