"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicCommandDispatcher = void 0;
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const vscode = __importStar(require("vscode"));
class BasicCommandDispatcher {
    constructor(context, packageInfo, packageRunner) {
        this._context = context;
        this._packageInfo = packageInfo;
        this._packageRunner = packageRunner;
    }
    get packageInfo() {
        return this._packageInfo;
    }
    get packageRunner() {
        return this._packageRunner;
    }
    set packageRunner(value) {
        this._packageRunner = value;
    }
    get context() {
        return this._context;
    }
    set context(value) {
        this._context = value;
    }
    activate() {
        // Use the console to output diagnostic information (console.log) and errors (console.error)
        // This line of code will only be executed once when your extension is activated
        console.log(`Activating ${this._packageInfo.packageDisplayName} ...`);
        // The command has been defined in the package.json file
        // Now provide the implementation of the command with registerCommand
        // The commandId parameter must match the command field in package.json
        let disposable = vscode.commands.registerCommand(this._packageInfo.runCommandName, (uri, uris) => __awaiter(this, void 0, void 0, function* () {
            // The code you place here will be executed every time your command is executed
            // if the command is called from Command Palette, uri and uris are undefined
            // we use the current file
            // To support calling the command from other scripts, we check both uris and uri.
            // Uris take precedence over uri.
            if (uris === undefined) {
                if (uri === undefined) {
                    const activeTextEditor = vscode.window.activeTextEditor;
                    if (activeTextEditor === undefined) {
                        yield vscode.window.showErrorMessage('No file to process.');
                        return;
                    }
                    else {
                        uri = activeTextEditor.document.uri;
                    }
                }
                uris = [uri];
            }
            try {
                yield this._packageRunner.run(uris);
            }
            catch (e) {
                // print error message
                yield vscode.window.showErrorMessage(e.message);
            }
        }));
        this._context.subscriptions.push(disposable);
        // For running autoflake for workspace folders
        disposable = vscode.commands.registerCommand(this._packageInfo.runForWorkspaceCommandName, () => __awaiter(this, void 0, void 0, function* () {
            const workspaceFolders = vscode.workspace.workspaceFolders;
            if (workspaceFolders === undefined) {
                yield vscode.window.showErrorMessage('No workspace has been opened.');
                return;
            }
            yield vscode.commands.executeCommand(this._packageInfo.runCommandName, undefined, workspaceFolders.map(folder => folder.uri));
        }));
        this._context.subscriptions.push(disposable);
        const runCommandName = this._packageInfo.runCommandName;
        // Register as a formatter
        disposable = vscode.languages.registerDocumentFormattingEditProvider({ language: 'python' }, {
            provideDocumentFormattingEdits(document) {
                return __awaiter(this, void 0, void 0, function* () {
                    yield vscode.commands.executeCommand(runCommandName, document.uri, undefined);
                    return [];
                });
            },
        });
        this._context.subscriptions.push(disposable);
        console.log(`${this._packageInfo.packageDisplayName} activated.`);
    }
}
exports.BasicCommandDispatcher = BasicCommandDispatcher;
