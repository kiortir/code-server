"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EasyCommandDispatcher = void 0;
const vscode = __importStar(require("vscode"));
const basicCommandDispatcher_1 = require("./basicCommandDispatcher");
const packageRunner_1 = require("../packageRunner/packageRunner");
const pythonVSCodeTerminal_1 = require("../pythonTerminal/pythonVSCodeTerminal");
const pythonHiddenTerminal_1 = require("../pythonTerminal/pythonHiddenTerminal");
class EasyCommandDispatcher extends basicCommandDispatcher_1.BasicCommandDispatcher {
    constructor(context, packageInfo, optionsBuilder) {
        super(context, packageInfo, EasyCommandDispatcher.createPackageRunner(packageInfo, optionsBuilder));
        this.optionsBuilder = optionsBuilder;
    }
    activate() {
        const disposable = vscode.workspace.onDidChangeConfiguration(e => {
            if (e.affectsConfiguration(this.packageInfo.useIntegratedTerminalConfigurationSectionFullName
                .split('.')
                .slice(0, -1)
                .join('.'))) {
                this.packageRunner = EasyCommandDispatcher.createPackageRunner(this.packageInfo, this.optionsBuilder);
            }
        });
        this.context.subscriptions.push(disposable);
        super.activate();
    }
    static createPackageRunner(packageInfo, optionsBuilder) {
        const splitted = packageInfo.useIntegratedTerminalConfigurationSectionFullName.split('.');
        const useIntegrated = vscode.workspace
            .getConfiguration(splitted.slice(0, -1).join('.'))
            .get(splitted[splitted.length - 1], false);
        console.log(`useIntegratedTerminal changed to ${useIntegrated.toString()}`);
        return new packageRunner_1.PackageRunner(useIntegrated
            ? new pythonVSCodeTerminal_1.PythonVSCodeTerminal()
            : new pythonHiddenTerminal_1.PythonHiddenTerminal(undefined), optionsBuilder, packageInfo, () => Promise.resolve(new pythonVSCodeTerminal_1.PythonVSCodeTerminal()));
    }
}
exports.EasyCommandDispatcher = EasyCommandDispatcher;
