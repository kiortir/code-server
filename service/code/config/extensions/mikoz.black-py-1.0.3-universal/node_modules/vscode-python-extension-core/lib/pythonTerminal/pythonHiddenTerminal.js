"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PythonHiddenTerminal = void 0;
const msPythonApi_1 = require("../msPythonApi");
const child_process = __importStar(require("child_process"));
/**
 * Provides a properly configured hidden terminal (child_process) for executing Python commands.
 */
class PythonHiddenTerminal {
    /**
     * @param uri Uri to get execution details for. (e.g. workspace folder)
     */
    constructor(uri) {
        this.execCommand = [];
        this.isInitialized = false;
        this.uri = uri;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const api = yield (0, msPythonApi_1.getExtensionApi)();
            if (api) {
                this.refreshExecCommand(api);
                api.settings.onDidChangeExecutionDetails(() => this.refreshExecCommand(api));
            }
            else {
                throw new Error('Could not get python extension api.');
            }
        });
    }
    refreshExecCommand(api) {
        const execCommand = api.settings.getExecutionDetails(this.uri).execCommand;
        if (execCommand) {
            this.execCommand = execCommand;
        }
        else {
            throw new Error('Python interpreter is not configured.');
        }
    }
    send(options, addNewLine) {
        return __awaiter(this, void 0, void 0, function* () {
            if (addNewLine) {
                throw new Error('addNewLine is not supported for hidden terminal.');
            }
            if (!this.isInitialized) {
                yield this.init();
                this.isInitialized = true;
            }
            const command = this.execCommand.concat(options);
            //Create child_process
            console.log('Running command: ' + command.join(' '));
            try {
                yield new Promise((resolve, reject) => {
                    const child = child_process.spawn(command[0], command.slice(1), {
                        shell: true,
                    });
                    child.stdout.on('data', data => {
                        console.log(`Stdout: ${data}`);
                    });
                    child.stderr.on('data', data => {
                        console.error(`Stderr: ${data}`);
                        reject(`Stderr: ${data}`);
                    });
                    child.on('close', code => {
                        console.log(`Child process exited with code ${code}.`);
                        resolve('Done');
                    });
                });
            }
            catch (e) {
                throw new Error(`${e}`);
            }
        });
    }
}
exports.PythonHiddenTerminal = PythonHiddenTerminal;
